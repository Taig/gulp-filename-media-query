// Generated by CoffeeScript 1.7.1
(function() {
  var concat, filenameMediaQuery, gulp, should;

  filenameMediaQuery = require('../');

  concat = require('concat-stream');

  gulp = require('gulp');

  should = require('should');

  describe('gulp-filename-media-query', function() {
    it('should fail with illegal file extensions', function(done) {
      return gulp.src('test/fixture/invalid/@screen.scss').pipe(filenameMediaQuery()).on('error', function(error) {
        should.exist(error);
        return done();
      });
    });
    it('should wrap empty files', function(done) {
      return gulp.src('test/fixture/empty/@screen.css').pipe(filenameMediaQuery()).pipe(concat(function(files) {
        files[0].contents.toString().should.containEql('screen');
        return done();
      }));
    });
    it('should refuse to process invalid filename syntax', function(done) {
      return gulp.src('test/fixture/invalid/@screen-42.css').pipe(filenameMediaQuery()).on('error', function(error) {
        should.exist(error);
        return done();
      });
    });
    it('should wrap valid files', function(done) {
      return gulp.src('test/fixture/valid/@screen.css').pipe(filenameMediaQuery()).pipe(concat(function(files) {
        files[0].contents.toString().should.be.exactly('@media screen {\n\tdiv {\n\t\tdisplay: block;\n\t}\n}');
        return done();
      }));
    });
    it('should support sophisticated media queries', function(done) {
      return gulp.src('test/fixture/valid/@print--w+400px--w-800px.css').pipe(filenameMediaQuery()).pipe(concat(function(files) {
        files[0].contents.toString().should.containEql('print and ( min-width: 400px ) and ( max-width: 800px )');
        return done();
      }));
    });
    it('should automatically prefix a media type if supplied as an option', function(done) {
      return gulp.src('test/fixture/valid/@min-width-400px.css').pipe(filenameMediaQuery({
        mediaType: 'tv'
      })).pipe(concat(function(files) {
        files[0].contents.toString().should.containEql('tv');
        return done();
      }));
    });
    return it('should allow manipulating the expressions with the evaluation callback', function(done) {
      return gulp.src('test/fixture/valid/@print--w+400px--w-800px.css').pipe(filenameMediaQuery({
        on: {
          evaluation: function(_, expressions) {
            return [
              _, expressions.map(function(_) {
                _.unit = 'rem';
                return _;
              })
            ];
          }
        }
      })).pipe(concat(function(files) {
        files[0].contents.toString().should.containEql('400rem');
        return done();
      }));
    });
  });

}).call(this);
