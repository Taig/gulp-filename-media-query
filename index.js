// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var buffer, filenameMediaQuery, path, through, util, _;

  _ = require('lodash');

  buffer = require('buffer').Buffer;

  path = require('path');

  through = require('through2');

  util = require('gulp-util');

  filenameMediaQuery = function(options) {
    var units;
    units = ['ch', 'cm', 'em', 'ex', 'in', 'mm', 'pc', 'pt', 'px', 'rem', 'vh', 'vw'];
    options = _.merge({
      mediaType: null
    }, options);
    return through.obj(function(file, _, callback) {
      var expression, expressions, extension, feature, mediaType, name, properties, query, value, _i, _len;
      if (file.isStream()) {
        callback();
        return this.emit('error', new util.PluginError('gulp-filename-media-query', 'Streaming is not supported'));
      }
      if (file.isNull()) {
        this.push(file);
        return callback();
      }
      name = path.basename(file.path);
      if (name[0] === '@' && file.contents.length) {
        extension = path.extname(name).substr(1);
        if (extension !== 'css') {
          callback();
          return this.emit('error', new util.PluginError('gulp-filename-media-query', "Only *.css files supported (*." + extension + ")"));
        }
        name = name.substr(1, name.indexOf(".css") - 1);
        properties = name.split('--');
        expressions = [];
        if (/^[a-z-]+$/.test(properties[0])) {
          mediaType = properties.shift();
        } else {
          mediaType = options.mediaType;
        }
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          expression = properties[_i];
          feature = expression.match(new RegExp("^([\\a-z-+]+)\\d*"))[1];
          value = null;
          if (feature.length < expression.length) {
            value = expression.match(new RegExp("(\\d+(?:" + (units.join('|')) + "))$"))[1];
          }
          switch (feature) {
            case 'w+':
              feature = 'min-width';
              break;
            case 'w-':
              feature = 'max-width';
              break;
            case 'h+':
              feature = 'min-height';
              break;
            case 'h-':
              feature = 'max-height';
          }
          if (feature[feature.length - 1] === '-') {
            feature = feature.substr(0, feature.length - 1);
          }
          expressions.push({
            feature: feature,
            value: value
          });
        }
        query = '@media ';
        if (mediaType !== null) {
          query += mediaType;
        }
        if (expressions.length) {
          query += ' and ' + expressions.map(function(expression) {
            if (expression.value === null) {
              return "( " + expression.feature + " )";
            } else {
              return "( " + expression.feature + ": " + expression.value + " )";
            }
          }).join(' and ');
        }
        query += " {\n\t" + (file.contents.toString().split('\n').slice(0, -1).join('\n\t')) + "\n}";
        file.contents = new buffer(query);
      }
      this.push(file);
      return callback();
    });
  };

  module.exports = filenameMediaQuery;

}).call(this);
