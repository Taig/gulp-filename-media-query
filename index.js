// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var buffer, filenameMediaQuery, path, through, util;

  buffer = require('buffer').Buffer;

  path = require('path');

  through = require('through2');

  util = require('gulp-util');

  filenameMediaQuery = function() {
    var extensions, regex, units;
    units = ['ch', 'cm', 'em', 'ex', 'in', 'mm', 'pc', 'pt', 'px', 'rem', 'vh', 'vw'];
    extensions = ['css', 'sass', 'scss'];
    regex = {
      file: new RegExp("/(([<>]\\d+(" + (units.join('|')) + "))|(=\\d+(" + (units.join('|')) + ")-\\d+(" + (units.join('|')) + ")))\\.(" + (extensions.join('|')) + ")$"),
      value: new RegExp("[<>=](.+)\\.(" + (extensions.join('|')) + ")")
    };
    return through.obj(function(file, _, callback) {
      var dimension, name, query, sign, suffix;
      if (file.isStream()) {
        callback();
        return this.emit('error', new util.PluginError('gulp-filename-media-query', 'Streaming not supported'));
      }
      if (!file.isNull() && regex.file.test(file.path)) {
        query = '@media screen and ';
        name = path.basename(file.path);
        sign = name[0];
        suffix = path.extname(name).substring(1);
        dimension = name.replace(regex.value, '$1');
        switch (sign) {
          case '<':
            query += "( max-width: " + dimension + " )";
            break;
          case '>':
            query += "( min-width: " + dimension + " )";
            break;
          case '=':
            dimension = dimension.split('-');
            query += "( min-width: " + dimension[0] + " ) and ( max-width: " + dimension[1] + " )";
            break;
          default:
            throw new util.PluginError('gulp-filename-media-query', 'Illegal file prefix');
        }
        if (suffix === 'sass') {
          query += '\n\t' + file.contents.toString().split('\n').join('\n\t');
        } else {
          query += ' {\n';
          query += file.contents.toString().join('\n');
          query += '\n}';
        }
        file.contents = new buffer(query);
      }
      this.push(file);
      return callback();
    });
  };

  module.exports = filenameMediaQuery;

}).call(this);
